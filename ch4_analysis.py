import streamlit as st
import matplotlib.pyplot as plt
import pandas as pd  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º pandas

def run():
    df = st.session_state.get("filtered_df", None)
    if df is None or df.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    st.subheader("–ê–Ω–∞–ª–∏–∑ –°–ù‚ÇÑ")
    st.info(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(df)}")

    if "–ú–µ—Ç–∞–Ω" not in df.columns:
        st.warning("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç CH‚ÇÑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –ì—Ä–∞—Ñ–∏–∫: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –º–µ—Ç–∞–Ω–∞ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
    st.markdown("### üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è CH‚ÇÑ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º (%)")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    bins = [0, 20, 40, 60, 70, 80, 90, 100]
    labels = [f"{bins[i]}‚Äì{bins[i+1]}" for i in range(len(bins) - 1)]
    df['CH4_range'] = pd.cut(df["–ú–µ—Ç–∞–Ω"], bins=bins, labels=labels, include_lowest=True)

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    ch4_counts = df['CH4_range'].value_counts().sort_index()
    ch4_counts = ch4_counts[ch4_counts > 0]  # —É–±–∏—Ä–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.barh(ch4_counts.index.astype(str), ch4_counts.values, color='blue')
    ax.set_xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–±–æ—Ä–æ–≤")
    ax.set_ylabel("–î–∏–∞–ø–∞–∑–æ–Ω —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è CH‚ÇÑ, %")
    ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –º–µ—Ç–∞–Ω–∞ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º")
    for i, v in enumerate(ch4_counts.values):
        ax.text(v + 0.5, i, str(v), va='center', fontsize=9)
    st.pyplot(fig)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.markdown("### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ CH‚ÇÑ")
    col1, col2, col3 = st.columns(3)
    col1.metric("–°—Ä–µ–¥–Ω–µ–µ", f"{df['–ú–µ—Ç–∞–Ω'].mean():.2f} %")
    col2.metric("–ú–∞–∫—Å–∏–º—É–º", f"{df['–ú–µ—Ç–∞–Ω'].max():.2f} %")
    col3.metric("–ú–∏–Ω–∏–º—É–º", f"{df['–ú–µ—Ç–∞–Ω'].min():.2f} %")

    # –¢–∞–±–ª–∏—Ü–∞
    display_cols = [col for col in ["–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ", "–î–ù–°", "–°—Ç—É–ø–µ–Ω—å –æ—Ç–±–æ—Ä–∞", "–î–∞—Ç–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"] if col in df.columns]
    df_display = df[display_cols + ["–ú–µ—Ç–∞–Ω"]].copy()
    df_display["–ú–µ—Ç–∞–Ω"] = df_display["–ú–µ—Ç–∞–Ω"].round(2)

    # CSS –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑ —Å–∫—Ä–æ–ª–ª–∞
    st.markdown("""
        <style>
            .scroll-free-table table {
                width: 100% !important;
                table-layout: auto !important;
                border-collapse: collapse;
            }
            .scroll-free-table th, .scroll-free-table td {
                text-align: left;
                padding: 6px 10px;
                font-size: 14px;
                border: 1px solid #ddd;
            }
        </style>
    """, unsafe_allow_html=True)

    st.markdown(f'<div class="scroll-free-table">{df_display.to_html(index=False)}</div>', unsafe_allow_html=True)
