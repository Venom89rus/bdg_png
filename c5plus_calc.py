import streamlit as st
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

def run():
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ session_state
    df = st.session_state.get("filtered_df", None)
    if df is None or df.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    st.subheader("–ê–Ω–∞–ª–∏–∑ –°‚ÇÖ+–≤.")
    st.info(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(df)}")

    # –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –≤—Ö–æ–¥—è—â–∏—Ö –≤ –°‚ÇÖ+–≤.
    components = ["–∏-–ü–µ–Ω—Ç–∞–Ω", "–Ω-–ü–µ–Ω—Ç–∞–Ω", "–ì–µ–∫—Å–∞–Ω—ã", "–ì–µ–ø—Ç–∞–Ω—ã", "–û–∫—Ç–∞–Ω—ã"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ DataFrame
    for comp in components:
        if comp not in df.columns:
            st.warning(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {comp} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö.")
            return

    # –ú–æ–ª—è—Ä–Ω—ã–µ –º–∞—Å—Å—ã (–≥/–º–æ–ª—å) –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Å—Å–æ–≤–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
    molar_masses = {
        "–∏-–ü–µ–Ω—Ç–∞–Ω": 72.15,
        "–Ω-–ü–µ–Ω—Ç–∞–Ω": 72.15,
        "–ì–µ–∫—Å–∞–Ω—ã": 86.18,
        "–ì–µ–ø—Ç–∞–Ω—ã": 100.2,
        "–û–∫—Ç–∞–Ω—ã": 114.23
    }

    Vm = 0.022414  # –º¬≥/–º–æ–ª—å ‚Äî –º–æ–ª—è—Ä–Ω—ã–π –æ–±—ä—ë–º –≥–∞–∑–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö

    # –†–∞—Å—á–µ—Ç –º–∞—Å—Å–æ–≤–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–≤ –≥/–º¬≥)
    for comp in components:
        df[comp + "_g_m3"] = df[comp] / 100 * molar_masses[comp] / Vm

    # –°—É–º–º–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º ‚Üí –ø–æ–ª—É—á–∞–µ–º –°‚ÇÖ+–≤.
    df["–°5+–≤."] = df[[f"{c}_g_m3" for c in components]].sum(axis=1)

    # üìà –í—ã–≤–æ–¥–∏–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –°‚ÇÖ+–≤.
    st.markdown("### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –°‚ÇÖ+–≤.")
    col1, col2, col3 = st.columns(3)
    col1.metric("–°—Ä–µ–¥–Ω–µ–µ", f"{df['–°5+–≤.'].mean():.2f} –≥/–º¬≥")
    col2.metric("–ú–∞–∫—Å–∏–º—É–º", f"{df['–°5+–≤.'].max():.2f} –≥/–º¬≥")
    col3.metric("–ú–∏–Ω–∏–º—É–º", f"{df['–°5+–≤.'].min():.2f} –≥/–º¬≥")

    # üìä –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º (50, 100, 150 ‚Ä¶)
    st.markdown("### üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –°‚ÇÖ+–≤.")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–≥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50 –≥/–º¬≥)
    step = 50
    max_value = df["–°5+–≤."].max()
    bins = list(range(0, int(max_value) + step, step))  # –ü—Ä–∏–º–µ—Ä: [0, 50, 100, 150, 200, ...]

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º (–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è)
    df["interval"] = pd.cut(df["–°5+–≤."], bins=bins)

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
    counts = df["interval"].value_counts().sort_index()

    # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (–≥–¥–µ count == 0)
    counts = counts[counts > 0]

    # –°—Ç—Ä–æ–∏–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
    fig, ax = plt.subplots(figsize=(10, 6))

    for i, (interval, count) in enumerate(counts.items()):
        label = f"{int(interval.left)}‚Äì{int(interval.right)}"
        ax.barh(y=label, width=count, height=0.8, color='blue', edgecolor='black')  # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–∞—Ä–∞
        ax.text(count + 0.5, i, str(count), va='center', fontsize=10)  # –ü–æ–¥–ø–∏—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø—Ä–∞–≤–∞ –æ—Ç –±–∞—Ä–∞

    ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –°‚ÇÖ+–≤. (–≥/–º¬≥)")
    ax.set_xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–±–æ—Ä–æ–≤")
    ax.set_ylabel("–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –°‚ÇÖ+–≤., –≥/–º¬≥")

    st.pyplot(fig)

    # üßæ –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    display_cols = [col for col in ["–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ", "–î–ù–°", "–°—Ç—É–ø–µ–Ω—å –æ—Ç–±–æ—Ä–∞", "–î–∞—Ç–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"] if col in df.columns]
    df_display = df[display_cols + components + ["–°5+–≤."]].copy()
    df_display["–°5+–≤."] = df_display["–°5+–≤."].round(2)  # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

    # –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
    st.markdown("""
        <style>
            .scroll-free-table table {
                width: 100% !important;
                table-layout: auto !important;
                border-collapse: collapse;
            }
            .scroll-free-table th, .scroll-free-table td {
                text-align: left;
                padding: 6px 10px;
                font-size: 14px;
                border: 1px solid #ddd;
            }
        </style>
    """, unsafe_allow_html=True)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º HTML-—Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏
    st.markdown(f'<div class="scroll-free-table">{df_display.to_html(index=False)}</div>', unsafe_allow_html=True)
